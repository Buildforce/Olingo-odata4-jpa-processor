ThisBuild / organization := "nl.buildforce"
ThisBuild / version      := "0.1.0-SNAPSHOT"
ThisBuild / scalaVersion := "2.13.3"
name := "odata4-jpa" // TODO provide a short yet descriptive name

javacOptions ++= Seq(
  "-Xlint:deprecation",
  "-Xlint:unchecked",
  "-source", "1.8",
  "-target", "1.8"
)

libraryDependencies ++= Seq(
  "commons-codec"                    %  "commons-codec" % "${commons.codec.version}",
  "commons-io"                       %  "commons-io" % "${commons.io.version}",
  "com.fasterxml.jackson.core"       %  "jackson-core" % "${jackson.version}",
  "com.fasterxml.jackson.core"       %  "jackson-databind" % "${jackson.version}",
  "com.fasterxml.jackson.dataformat" %  "jackson-dataformat-xml" % "${jackson.version}",
  "javax.xml.stream"                 %  "stax-api"               % "${stax.api.version}",
  "jakarta.servlet"                  %  "jakarta.servlet-api" % "${jakarta-servlet.version}" % "provided",
  "org.apache.maven"                 %  "maven-plugin-api" % "${maven.plugin.api.version}",
  "org.apache.maven.plugin-tools"    %  "maven-plugin-annotations" % "${maven.plugin.tools.version}",
  "junit"                            %  "junit" % "4.13" % "test",
  "org.mockito"                      %  "mockito-all" % "2.0.2-beta" % "test",
  "org.scalatest"                   %% "scalatest"   % "3.1.0" % Test withSources(),
  "junit"                            %  "junit"       % "4.12"  % Test
)


// Only show warnings and errors on the screen for compilations.
// This applies to both test:compile and compile and is Info by default
logLevel in compile := Level.Warn

// Level.INFO is needed to see detailed output when running tests
logLevel in test := Level.Info

resolvers ++= Seq(
)

scalacOptions ++= Seq(
  "-deprecation",                      // Emit warning and location for usages of deprecated APIs.
  "-encoding", "utf-8",                // Specify character encoding used by source files.
  "-explaintypes",                     // Explain type errors in more detail.
  "-feature",                          // Emit warning and location for usages of features that should be imported explicitly.
  "-language:existentials",            // Existential types (besides wildcard types) can be written and inferred
  "-language:experimental.macros",     // Allow macro definition (besides implementation and application)
  "-language:higherKinds",             // Allow higher-kinded types
  "-language:implicitConversions",     // Allow definition of implicit functions called views
  "-language:postfixOps",          // ✓
  "-unchecked",                        // Enable additional warnings where generated code depends on assumptions.
  //"-Xcheckinit",                       // Wrap field accessors to throw an exception on uninitialized access.
  "-Xfatal-warnings",              // ✓ New lines for each options
  "-Ywarn-dead-code",              // ✓
  "-Ywarn-numeric-widen",          // ✓
  //  "-Ywarn-unused",
  // "-Ywarn-value-discard"
  "-Xlint:adapted-args",               // Warn if an argument list is modified to match the receiver.
  "-Xlint:constant",                   // Evaluation of a constant arithmetic expression results in an error.
  "-Xlint:delayedinit-select",         // Selecting member of DelayedInit.
  "-Xlint:doc-detached",               // A Scaladoc comment appears to be detached from its element.
  "-Xlint:inaccessible",               // Warn about inaccessible types in method signatures.
  "-Xlint:infer-any",                  // Warn when a type argument is inferred to be `Any`.
  "-Xlint:missing-interpolator",       // A string literal appears to be missing an interpolator id.
 // "-Xlint:nullary-override",           // Warn when non-nullary `def f()' overrides nullary `def f'.
  "-Xlint:nullary-unit",               // Warn when nullary methods return Unit.
  "-Xlint:option-implicit",            // Option.apply used implicit view.
  "-Xlint:package-object-classes",     // Class or object defined in package object.
  "-Xlint:poly-implicit-overload",     // Parameterized overloaded implicit methods are not visible as view bounds.
  "-Xlint:private-shadow",             // A private field (or class parameter) shadows a superclass field.
  "-Xlint:stars-align",                // Pattern sequence wildcard must align with sequence component.
  "-Xlint:type-parameter-shadow"       // A local type parameter shadows a type already in scope.
)

// The REPL can’t cope with -Ywarn-unused:imports or -Xfatal-warnings so turn them off for the console
scalacOptions in (Compile, console) --= Seq("-Ywarn-unused:imports", "-Xfatal-warnings")

scalacOptions in (Compile, doc) ++= baseDirectory.map {
  bd: File => Seq[String](
     "-sourcepath", bd.getAbsolutePath, // todo replace my-new-project with the github project name
     "-doc-source-url", s"https://github.com/$gitHubId/my-new-project/tree/master€{FILE_PATH}.scala"
  )
}.value

scmInfo := Some(
  ScmInfo(
    url(s"https://github.com/$gitHubId/$name"),
    s"git@github.com:$gitHubId/$name.git"
  )
)
